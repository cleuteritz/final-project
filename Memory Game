var currentScene = 0;
var stillPlaying = false;
var startTime;

var drawBitmojiHead=function(bitmojiX,bitmojiY,height){
fill(235, 215, 202);
noStroke();
rect(bitmojiX+(height/150*182),bitmojiY+(height/150*235),(height/150*35),(height/150*85));
ellipse(bitmojiX+(height/150*200),bitmojiY+(height/150*236),(height/150*123),(height/150*108));
ellipse(bitmojiX+(height/150*200),bitmojiY+(height/150*185),(height/150*148),(height/150*156));
ellipse(bitmojiX+(height/150*271),bitmojiY+(height/150*215),(height/150*10),(height/150*20));
ellipse(bitmojiX+(height/150*130),bitmojiY+(height/150*215),(height/150*10),(height/150*20));
//Head

fill(167, 198, 214);
stroke(255, 255, 255);
strokeWeight(3);
ellipse(bitmojiX+(height/150*168),bitmojiY+(height/150*200),(height/150*20),(height/150*20));
ellipse(bitmojiX+(height/150*228),bitmojiY+(height/150*200),(height/150*20),(height/150*20));
fill(61, 54, 50);
stroke(87, 70, 56);
line(bitmojiX+(height/150*145),bitmojiY+(height/150*195),bitmojiX+(height/150*175),bitmojiY+(height/150*186));
line(bitmojiX+(height/150*221),bitmojiY+(height/150*186),bitmojiX+(height/150*254),bitmojiY+(height/150*195));
//Eyes and Brows

noStroke();
fill(191, 103, 103);
arc(bitmojiX+(height/150*200),bitmojiY+(height/150*257),(height/150*42),(height/150*27),(height/150*3),193);
stroke(255, 255, 255);
line(bitmojiX+(height/150*180),bitmojiY+(height/150*255),bitmojiX+(height/150*219),bitmojiY+(height/150*255));
noStroke();
//Mouth

fill(212, 191, 178);
triangle(bitmojiX+(height/150*185),bitmojiY+(height/150*236),bitmojiX+(height/150*200),bitmojiY+(height/150*245),bitmojiX+(height/150*215),bitmojiY+(height/150*236));
//Nose

fill(48, 34, 22);
ellipse(bitmojiX+(height/150*135),bitmojiY+(height/150*138),(height/150*30),(height/150*30));
ellipse(bitmojiX+(height/150*156),bitmojiY+(height/150*137),(height/150*30),(height/150*30));
ellipse(bitmojiX+(height/150*181),bitmojiY+(height/150*134),(height/150*30),(height/150*30));
ellipse(bitmojiX+(height/150*201),bitmojiY+(height/150*127),(height/150*30),(height/150*30));
ellipse(bitmojiX+(height/150*226),bitmojiY+(height/150*123),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*126),bitmojiY+(height/150*153),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*127),bitmojiY+(height/150*128),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*145),bitmojiY+(height/150*113),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*265),bitmojiY+(height/150*146),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*166),bitmojiY+(height/150*109),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*188),bitmojiY+(height/150*110),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*214),bitmojiY+(height/150*103),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*268),bitmojiY+(height/150*123),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*250),bitmojiY+(height/150*133),(height/150*35),(height/150*35));
ellipse(bitmojiX+(height/150*244),bitmojiY+(height/150*112),(height/150*35),(height/150*35));
//Hair

};

var drawBitmojiBody=function(bitmojiX,bitmojiY,height){
 fill(148, 148, 148);
rect(bitmojiX+(height/150*110),bitmojiY+(height/150*300),(height/150*178),(height/150*50));
arc(bitmojiX+(height/150*112),bitmojiY+(height/150*321),(height/150*65),(height/150*41),(height/150*91),270);
arc(bitmojiX+(height/150*293),bitmojiY+(height/150*321),(height/150*65),(height/150*41),(height/150*-90),317);
rect(bitmojiX+(height/150*80),bitmojiY+(height/150*325),(height/150*193),(height/150*46));
rect(bitmojiX+(height/150*133),bitmojiY+(height/150*325),(height/150*193),(height/150*46));
fill(255, 255, 255);
textSize((height/150*50));
text('JM',bitmojiX+(height/150*165),bitmojiY+(height/150*320),(height/150*100),(height/150*100));
//Shirt   
};

var drawJayden=function(bitmojiX,bitmojiY,height)
{
    drawBitmojiHead(bitmojiX,bitmojiY,height);
    drawBitmojiBody(bitmojiX,bitmojiY,height);
};


var connor = function (x,y,h){
    //Hair
noStroke();
fill(158, 105, 19);
quad(x+(h/100*141),y+(h/100*84),x+(h/100*146),y+(h/100*145),x+(h/100*48),y+(h/100*140),x+(h/100*59),y+(h/100*82));

//Hood
stroke(0, 0, 0);
fill(49, 58, 189);
ellipse(x+(h/100*98),y+(h/100*142),h/100*88,h/100*22);

//Head
noStroke();
fill (252, 216, 148);
ellipse (x+(h/100*100),y+(h/100*100),h/100*82,h/100*100);      

//Hat
fill (255, 0, 0);
arc(x+(h/100*100),y+(h/100*89),h/100*87,h/100*103,184,364);      

//Eyes
stroke(0, 0, 0);
fill(255, 255, 255);
ellipse(x+(h/100*88),y+(h/100*101),h/100*13,h/100*15);
ellipse(x+(h/100*113),y+(h/100*101),h/100*13,h/100*15);

//Pupils
fill(31, 124, 217);
ellipse(x+(h/100*88),y+(h/100*101),h/100*5,h/100*5);
ellipse(x+(h/100*112),y+(h/100*101),h/100*5,h/100*5);

//Nose
stroke(0, 0, 0);
fill(252,216,148);
bezier(x+(h/100*101),y+(h/100*103),x+(h/100*116),y+(h/100*121),x+(h/100*93),y+(h/100*121),x+(h/100*96),y+(h/100*115));

//Sweatshirt
noStroke();
fill(49, 58, 189);
quad(x+(h/100*148),y+(h/100*149),x+(h/100*46),y+(h/100*148),x+(h/100*48),y+(h/100*221),x+(h/100*151),y+(h/100*221));

// Letter C
stroke(255, 255, 255);
fill(255, 255, 255);
rect(x+(h/100*58),y+(h/100*153),h/100*6,h/100*59);
rect(x+(h/100*65),y+(h/100*153),h/100*23,h/100*6);
rect(x+(h/100*65),y+(h/100*206),h/100*23,h/100*6);

// Letter L
stroke(255, 255, 255);
fill(255, 255, 255);
rect(x+(h/100*109),y+(h/100*153),h/100*6,h/100*59);
rect(x+(h/100*109),y+(h/100*207),h/100*30,h/100*6);

//Mouth
fill(0, 0, 0);
arc(x+(h/100*99),y+(h/100*128),h/100*26,h/100*26,0,180);
};


var Tile = function(x, y, face) {
    this.x = x;
    this.y = y;
    this.size = 57;
    this.face = face;
    this.isFaceUp = false;
    this.isMatch = false;
};

Tile.prototype.leaf_img = getImage("avatars/leaf-red");

Tile.prototype.draw = function() {
    stroke(0, 0, 0);
    rectMode(CORNER);
    if (this.isFaceUp){
        if (0 && this.isMoused() ){
            fill(250, 90, 90);
        } else {
            fill(245, 155, 155);
        }
    //fill(245, 204, 223);
        strokeWeight(2);
        rect(this.x, this.y, this.size, this.size, 10);
        image(this.face, this.x, this.y, this.size, this.size);
    } else {
        if (1 && this.isMoused() ){
            fill(250, 90, 90);
        }else{
            fill(247, 155, 155);
        }
    strokeWeight(2);
        rect(this.x, this.y, this.size, this.size, 10);
        image(this.leaf_img, this.x, this.y,
            this.size, this.size);
    /*if (this.isFaceUp) {
        image(this.face, this.x, this.y, this.size, this.size);
    } else {
        image(getImage("avatars/leaf-red"), this.x, this.y, this.size, this.size);
    }*/
}
};

Tile.prototype.isMoused = function() {
    return this.isUnderMouse(mouseX, mouseY); };
    
Tile.prototype.isUnderMouse = function(x, y) {
    return x >= this.x && x <= this.x + this.size  &&
        y >= this.y && y <= this.y + this.size;
};

// Global config
var NUM_COLS = 6;
var NUM_ROWS = 4;

// Declare an array of all possible faces
var faces = [
    getImage("avatars/duskpin-ultimate"),
    getImage("avatars/aqualine-ultimate"),
    getImage("avatars/leafers-ultimate"),
    getImage("avatars/piceratops-ultimate"),
    getImage("avatars/primosaur-ultimate"),
    getImage("avatars/starky-ultimate"),
];

// Make an array which has 4 of each, then randomize it
var possibleFaces = faces.slice(0);
var selected = [];
for (var i = 0; i < (NUM_COLS * NUM_ROWS) / 4; i++) {
    // Randomly pick one from the array of remaining faces
    var randomInd = floor(random(possibleFaces.length));
    var face = possibleFaces[randomInd];
    // Push four onto array
    selected.push(face);
    selected.push(face);
    selected.push(face);
    selected.push(face);
    // Remove from array
    possibleFaces.splice(randomInd, 1);
}

// Now shuffle the elements of that array
var shuffleArray = function(array) {
    var counter = array.length;

    // While there are elements in the array
    while (counter > 0) {
        // Pick a random index
        var ind = Math.floor(Math.random() * counter);
        // Decrease counter by 1
        counter--;
        // And swap the last element with it
        var temp = array[counter];
        array[counter] = array[ind];
        array[ind] = temp;
    }
};
shuffleArray(selected);

// Create the tiles
var tiles = [];
for (var i = 0; i < NUM_COLS; i++) {
    for (var j = 0; j < NUM_ROWS; j++) {
        var tileX = i * 66 + 10;
        var tileY = j * 83 + 73;
        var tileFace = selected.pop();
        tiles.push(new Tile(tileX, tileY, tileFace));
    }
}

background(255, 255, 255);

var numTries = 0;
var numMatches = 0;
var flippedTiles = [];
var delayStartFC = null;

//button
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(0, 234, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var startButton = new Button({
    x: 119,
    y: 300,
    label: "Start Game!",
    onClick: function() {
        stillPlaying = true;
        startTime=millis();
    }
});

mouseClicked = function() {
    if (stillPlaying===false)
    {
        startButton.handleMouseClick();
    }
    else if(stillPlaying=== true){
    for (var i = 0; i < tiles.length; i++) {
        var tile = tiles[i];
        if (tile.isUnderMouse(mouseX, mouseY)) {
            if (flippedTiles.length < 4 && !tile.isFaceUp) {
                tile.isFaceUp = true;
                flippedTiles.push(tile);
                if (flippedTiles.length === 4) {
                    numTries++;
                    if (flippedTiles[0].face === flippedTiles[1].face && flippedTiles[0].face === flippedTiles[2].face && flippedTiles[0].face === flippedTiles[3].face ) {
                        flippedTiles[0].isMatch = true;
                        flippedTiles[1].isMatch = true;
                        flippedTiles[2].isMatch = true;
                        flippedTiles[3].isMatch = true;
                        flippedTiles.length = 0;
                        numMatches++;
                    }
                    delayStartFC = frameCount;
                }
            } 
            loop();
        }
    }
    }
};

//intro
var splashScreen = function()
{
    background(106, 138, 196);
    connor(48,61,35);
    textSize(30);
    text("Memory Game", 3,22);
    textSize(15);
    text("By: Connor Leuteritz and Jayden Medeiros",3,54);
    text("Instructions: Click 4 tiles at a time to find the set of 4",3,150);
    text("matching figures. Race the clock, and do it with the least",3,165);
    text("amount of tries!",3,180);
    text("Press the start button when you are ready!", 50, 269);
    drawJayden(103,50,35);
    startButton.draw();
};

var playGame= function(){
    background(255, 255, 255);
    if (delayStartFC && (frameCount - delayStartFC) > 30) {
        for (var i = 0; i < tiles.length; i++) {
            var tile = tiles[i];
            if (!tile.isMatch) {
                tile.isFaceUp = false;
            }
        }
        flippedTiles = [];
        delayStartFC = null;
    }
    
    for (var i = 0; i < tiles.length; i++) {
        tiles[i].draw();
    }
    
        fill(0, 0, 0);
        textSize(15);
        text("Attempts: " + numTries, 292, 25);
        text("Timer: " + round((millis()-startTime)/1000)+ " seconds", 18,25);
    



};

//call to draw
var draw = function() {
    if (stillPlaying === false){splashScreen();}
    else if (stillPlaying === true){playGame();

}
};
